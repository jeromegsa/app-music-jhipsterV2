package bj.highfiveuniversity.domain;

import static bj.highfiveuniversity.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class MusicAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMusicAllPropertiesEquals(Music expected, Music actual) {
        assertMusicAutoGeneratedPropertiesEquals(expected, actual);
        assertMusicAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMusicAllUpdatablePropertiesEquals(Music expected, Music actual) {
        assertMusicUpdatableFieldsEquals(expected, actual);
        assertMusicUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMusicAutoGeneratedPropertiesEquals(Music expected, Music actual) {
        assertThat(expected)
            .as("Verify Music auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMusicUpdatableFieldsEquals(Music expected, Music actual) {
        assertThat(expected)
            .as("Verify Music relevant properties")
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getDuration()).as("check duration").isEqualTo(actual.getDuration()))
            .satisfies(e -> assertThat(e.getParoles()).as("check paroles").isEqualTo(actual.getParoles()))
            .satisfies(e ->
                assertThat(e.getCreated_At())
                    .as("check created_At")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getCreated_At())
            )
            .satisfies(e -> assertThat(e.getUpdated_At()).as("check updated_At").isEqualTo(actual.getUpdated_At()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMusicUpdatableRelationshipsEquals(Music expected, Music actual) {
        assertThat(expected)
            .as("Verify Music relationships")
            .satisfies(e -> assertThat(e.getAlbum()).as("check album").isEqualTo(actual.getAlbum()));
    }
}
